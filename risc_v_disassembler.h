typedef enum {
    rv32,
    rv64,
    rv128
} rv_isa;

typedef enum {
    rv_rm_rne = 0,
    rv_rm_rtz = 1,
    rv_rm_rdn = 2,
    rv_rm_rup = 3,
    rv_rm_rmm = 4,
    rv_rm_dyn = 7,
} rv_rm;

typedef enum {
    rv_fence_i = 8,
    rv_fence_o = 4,
    rv_fence_r = 2,
    rv_fence_w = 1,
} rv_fence;

typedef enum {
    op_illegal,
    op_c_addi4spn,
    op_c_fld,
    op_c_lq,
    op_c_lw,
    op_c_flw,
    op_c_ld,
    op_c_fsd,
    op_c_sq,
    op_c_sw,
    op_c_fsw,
    op_c_sd,
    op_c_nop,
    op_c_addi,
    op_c_jal,
    op_c_addiw,
    op_c_li,
    op_c_addi16sp,
    op_c_lui,
    op_c_srli,
    op_c_srai,
    op_c_andi,
    op_c_sub,
    op_c_xor,
    op_c_or,
    op_c_and,
    op_c_subw,
    op_c_addw,
    op_c_j,
    op_c_beqz,
    op_c_bnez,
    op_c_slli,
    op_c_fldsp,
    op_c_lqsp,
    op_c_lwsp,
    op_c_flwsp,
    op_c_ldsp,
    op_c_jr,
    op_c_mv,
    op_c_ebreak,
    op_c_jalr,
    op_c_add,
    op_c_fsdsp,
    op_c_sqsp,
    op_c_swsp,
    op_c_fswsp,
    op_c_sdsp,
    op_lui,
    op_auipc,
    op_jal,
    op_jalr,
    op_beq,
    op_bne,
    op_blt,
    op_bge,
    op_bltu,
    op_bgeu,
    op_lb,
    op_lh,
    op_lw,
    op_lbu,
    op_lhu,
    op_sb,
    op_sh,
    op_sw,
    op_addi,
    op_slti,
    op_sltiu,
    op_xori,
    op_ori,
    op_andi,
    op_slli,
    op_srli,
    op_srai,
    op_add,
    op_sub,
    op_sll,
    op_slt,
    op_sltu,
    op_xor,
    op_srl,
    op_sra,
    op_or,
    op_and,
    op_fence,
    op_ecall,
    op_ebreak,
    op_lwu,
    op_ld,
    op_sd,
    op_addiw,
    op_slliw,
    op_srliw,
    op_sraiw,
    op_addw,
    op_subw,
    op_sllw,
    op_srlw,
    op_sraw,
    op_fence_i,
    op_csrrw,
    op_csrrs,
    op_csrrc,
    op_csrrwi,
    op_csrrsi,
    op_csrrci,
    op_mul,
    op_mulh,
    op_mulhsu,
    op_mulhu,
    op_div,
    op_divu,
    op_rem,
    op_remu,
    op_mulw,
    op_divw,
    op_divuw,
    op_remw,
    op_remuw,
    op_lr_w,
    op_sc_w,
    op_amoswap_w,
    op_amoadd_w,
    op_amoxor_w,
    op_amoand_w,
    op_amoor_w,
    op_amomin_w,
    op_amomax_w,
    op_amominu_w,
    op_amomaxu_w,
    op_lr_d,
    op_sc_d,
    op_amoswap_d,
    op_amoadd_d,
    op_amoxor_d,
    op_amoand_d,
    op_amoor_d,
    op_amomin_d,
    op_amomax_d,
    op_amominu_d,
    op_amomaxu_d,
    op_flw,
    op_fsw,
    op_fmadd_s,
    op_fmsub_s,
    op_fnmsub_s,
    op_fnmadd_s,
    op_fadd_s,
    op_fsub_s,
    op_fmul_s,
    op_fdiv_s,
    op_fsqrt_s,
    op_fsgnj_s,
    op_fsgnjn_s,
    op_fsgnjx_s,
    op_fmin_s,
    op_fmax_s,
    op_fcvt_w_s,
    op_fcvt_wu_s,
    op_fmv_x_w,
    op_feq_s,
    op_flt_s,
    op_fle_s,
    op_fclass_s,
    op_fcvt_s_w,
    op_fcvt_s_wu,
    op_fmv_w_x,
    op_fcvt_l_s,
    op_fcvt_lu_s,
    op_fcvt_s_l,
    op_fcvt_s_lu,
    op_fld,
    op_fsd,
    op_fmadd_d,
    op_fmsub_d,
    op_fnmsub_d,
    op_fnmadd_d,
    op_fadd_d,
    op_fsub_d,
    op_fmul_d,
    op_fdiv_d,
    op_fsqrt_d,
    op_fsgnj_d,
    op_fsgnjn_d,
    op_fsgnjx_d,
    op_fmin_d,
    op_fmax_d,
    op_fcvt_s_d,
    op_fcvt_d_s,
    op_feq_d,
    op_flt_d,
    op_fle_d,
    op_fclass_d,
    op_fcvt_w_d,
    op_fcvt_wu_d,
    op_fcvt_d_w,
    op_fcvt_d_wu,
    op_fcvt_l_d,
    op_fcvt_lu_d,
    op_fmv_x_d,
    op_fcvt_d_l,
    op_fcvt_d_lu,
    op_fmv_d_x,
    op_flq,
    op_fsq,
    op_fmadd_q,
    op_fmsub_q,
    op_fnmsub_q,
    op_fnmadd_q,
    op_fadd_q,
    op_fsub_q,
    op_fmul_q,
    op_fdiv_q,
    op_fsqrt_q,
    op_fsgnj_q,
    op_fsgnjn_q,
    op_fsgnjx_q,
    op_fmin_q,
    op_fmax_q,
    op_fcvt_s_q,
    op_fcvt_q_s,
    op_fcvt_d_q,
    op_fcvt_q_d,
    op_feq_q,
    op_flt_q,
    op_fle_q,
    op_fclass_q,
    op_fcvt_w_q,
    op_fcvt_wu_q,
    op_fcvt_q_w,
    op_fcvt_q_wu,
    op_fcvt_l_q,
    op_fcvt_lu_q,
    op_fcvt_q_l,
    op_fcvt_q_lu,
    op_flh,
    op_fsh,
    op_fmadd_h,
    op_fmsub_h,
    op_fnmsub_h,
    op_fnmadd_h,
    op_fadd_h,
    op_fsub_h,
    op_fmul_h,
    op_fdiv_h,
    op_fsqrt_h,
    op_fsgnj_h,
    op_fsgnjn_h,
    op_fsgnjx_h,
    op_fmin_h,
    op_fmax_h,
    op_fcvt_s_h,
    op_fcvt_h_s,
    op_fcvt_d_h,
    op_fcvt_h_d,
    op_fcvt_q_h,
    op_fcvt_h_q,
    op_feq_h,
    op_flt_h,
    op_fle_h,
    op_fclass_h,
    op_fcvt_w_h,
    op_fcvt_wu_h,
    op_fmv_x_h,
    op_fcvt_h_w,
    op_fcvt_h_wu,
    op_fmv_h_x,
    op_fcvt_l_h,
    op_fcvt_lu_h,
    op_fcvt_h_l,
    op_fcvt_h_lu,
    op_wrs_nto,
    op_wrs_sto
} rv_op;

typedef struct {
    uint8_t legit;
    uint8_t length;
    uint16_t offset;
    uint8_t flags;
    uint8_t data[16];
    uint8_t checksum;
    //
    uint8_t cur_ptr;
    uint8_t destruct_flag;
} hex_string;

typedef struct {
    uint64_t offset;
    // pc 0 - rv32, 1 - rv64, 2 - rv128 
    uint8_t pc;
    // opcode of byte_data
    uint16_t opcode;
    // whole command
    uint32_t byte_data;
    int32_t imm;
    uint8_t rd;
    uint8_t rs1;
    uint8_t rs2;
    uint8_t rs3;
    // rounding mode encoding
    uint8_t rm;
    uint8_t pred;
    uint8_t succ;
    uint8_t aq;
    uint8_t rl;
} command_data;

typedef enum {
    rv_reg_zero,
    rv_reg_ra,
    rv_reg_sp,
    rv_reg_gp,
    rv_reg_tp,
    rv_reg_t0,
    rv_reg_t1,
    rv_reg_t2,
    rv_reg_s0,
    rv_reg_s1,
    rv_reg_a0,
    rv_reg_a1,
    rv_reg_a2,
    rv_reg_a3,
    rv_reg_a4,
    rv_reg_a5,
    rv_reg_a6,
    rv_reg_a7,
    rv_reg_s2,
    rv_reg_s3,
    rv_reg_s4,
    rv_reg_s5,
    rv_reg_s6,
    rv_reg_s7,
    rv_reg_s8,
    rv_reg_s9,
    rv_reg_s10,
    rv_reg_s11,
    rv_reg_t3,
    rv_reg_t4,
    rv_reg_t5,
    rv_reg_t6,
} rv_reg;

uint8_t fgetc_hex(FILE *file);
uint8_t fgets_hex(uint8_t* buf, size_t num, FILE *file);
uint8_t str_byte_to_hex(uint8_t str_byte);

uint32_t get_next_command(hex_string *h_str, FILE *file);
uint8_t read_next_str(hex_string *h_str, FILE *file);
uint8_t find_offset(hex_string *h_str, FILE *file, uint16_t offset);

// bp - byte parse
void bp_opcode(command_data* cd);